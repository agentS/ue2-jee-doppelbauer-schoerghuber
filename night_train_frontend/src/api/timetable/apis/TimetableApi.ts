/* tslint:disable */
/* eslint-disable */
/**
 * Timetable API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: lukas.schoerghuber@posteo.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RailwayStationConnectionDto,
    RailwayStationConnectionDtoFromJSON,
    RailwayStationConnectionDtoToJSON,
    RailwayStationDestinationsDto,
    RailwayStationDestinationsDtoFromJSON,
    RailwayStationDestinationsDtoToJSON,
    RailwayStationDto,
    RailwayStationDtoFromJSON,
    RailwayStationDtoToJSON,
    TrainCarDto,
    TrainCarDtoFromJSON,
    TrainCarDtoToJSON,
    TrainConnectionDto,
    TrainConnectionDtoFromJSON,
    TrainConnectionDtoToJSON,
} from '../models';

export interface DestinationsFromIdGetRequest {
    id: number;
}

export interface DestinationsFromOriginIdToDestinationIdGetRequest {
    destinationId: number;
    originId: number;
}

export interface RailwayStationIdGetRequest {
    id: number;
}

export interface RailwayStationSearchSearchTermGetRequest {
    searchTerm: string;
}

export interface TrainConnectionCodeCodeCarsGetRequest {
    code: string;
}

export interface TrainConnectionCodeCodeGetRequest {
    code: string;
}

export interface TrainConnectionIdCarsGetRequest {
    id: number;
}

export interface TrainConnectionIdGetRequest {
    id: number;
}

/**
 * no description
 */
export class TimetableApi extends runtime.BaseAPI {

    /**
     */
    async destinationsFromIdGetRaw(requestParameters: DestinationsFromIdGetRequest): Promise<runtime.ApiResponse<RailwayStationDestinationsDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destinationsFromIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/destinations/from/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RailwayStationDestinationsDtoFromJSON(jsonValue));
    }

    /**
     */
    async destinationsFromIdGet(requestParameters: DestinationsFromIdGetRequest): Promise<RailwayStationDestinationsDto> {
        const response = await this.destinationsFromIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async destinationsFromOriginIdToDestinationIdGetRaw(requestParameters: DestinationsFromOriginIdToDestinationIdGetRequest): Promise<runtime.ApiResponse<Array<RailwayStationConnectionDto>>> {
        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling destinationsFromOriginIdToDestinationIdGet.');
        }

        if (requestParameters.originId === null || requestParameters.originId === undefined) {
            throw new runtime.RequiredError('originId','Required parameter requestParameters.originId was null or undefined when calling destinationsFromOriginIdToDestinationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/destinations/from/{originId}/to/{destinationId}`.replace(`{${"destinationId"}}`, encodeURIComponent(String(requestParameters.destinationId))).replace(`{${"originId"}}`, encodeURIComponent(String(requestParameters.originId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RailwayStationConnectionDtoFromJSON));
    }

    /**
     */
    async destinationsFromOriginIdToDestinationIdGet(requestParameters: DestinationsFromOriginIdToDestinationIdGetRequest): Promise<Array<RailwayStationConnectionDto>> {
        const response = await this.destinationsFromOriginIdToDestinationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async railwayStationGetRaw(): Promise<runtime.ApiResponse<Array<RailwayStationDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/railwayStation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RailwayStationDtoFromJSON));
    }

    /**
     */
    async railwayStationGet(): Promise<Array<RailwayStationDto>> {
        const response = await this.railwayStationGetRaw();
        return await response.value();
    }

    /**
     */
    async railwayStationIdGetRaw(requestParameters: RailwayStationIdGetRequest): Promise<runtime.ApiResponse<RailwayStationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling railwayStationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/railwayStation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RailwayStationDtoFromJSON(jsonValue));
    }

    /**
     */
    async railwayStationIdGet(requestParameters: RailwayStationIdGetRequest): Promise<RailwayStationDto> {
        const response = await this.railwayStationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async railwayStationSearchSearchTermGetRaw(requestParameters: RailwayStationSearchSearchTermGetRequest): Promise<runtime.ApiResponse<Array<RailwayStationDto>>> {
        if (requestParameters.searchTerm === null || requestParameters.searchTerm === undefined) {
            throw new runtime.RequiredError('searchTerm','Required parameter requestParameters.searchTerm was null or undefined when calling railwayStationSearchSearchTermGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/railwayStation/search/{searchTerm}`.replace(`{${"searchTerm"}}`, encodeURIComponent(String(requestParameters.searchTerm))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RailwayStationDtoFromJSON));
    }

    /**
     */
    async railwayStationSearchSearchTermGet(requestParameters: RailwayStationSearchSearchTermGetRequest): Promise<Array<RailwayStationDto>> {
        const response = await this.railwayStationSearchSearchTermGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trainConnectionCodeCodeCarsGetRaw(requestParameters: TrainConnectionCodeCodeCarsGetRequest): Promise<runtime.ApiResponse<Array<TrainCarDto>>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling trainConnectionCodeCodeCarsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trainConnection/code/{code}/cars`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrainCarDtoFromJSON));
    }

    /**
     */
    async trainConnectionCodeCodeCarsGet(requestParameters: TrainConnectionCodeCodeCarsGetRequest): Promise<Array<TrainCarDto>> {
        const response = await this.trainConnectionCodeCodeCarsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trainConnectionCodeCodeGetRaw(requestParameters: TrainConnectionCodeCodeGetRequest): Promise<runtime.ApiResponse<TrainConnectionDto>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling trainConnectionCodeCodeGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trainConnection/code/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainConnectionDtoFromJSON(jsonValue));
    }

    /**
     */
    async trainConnectionCodeCodeGet(requestParameters: TrainConnectionCodeCodeGetRequest): Promise<TrainConnectionDto> {
        const response = await this.trainConnectionCodeCodeGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trainConnectionGetRaw(): Promise<runtime.ApiResponse<Array<TrainConnectionDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trainConnection`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrainConnectionDtoFromJSON));
    }

    /**
     */
    async trainConnectionGet(): Promise<Array<TrainConnectionDto>> {
        const response = await this.trainConnectionGetRaw();
        return await response.value();
    }

    /**
     */
    async trainConnectionIdCarsGetRaw(requestParameters: TrainConnectionIdCarsGetRequest): Promise<runtime.ApiResponse<Array<TrainCarDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trainConnectionIdCarsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trainConnection/{id}/cars`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrainCarDtoFromJSON));
    }

    /**
     */
    async trainConnectionIdCarsGet(requestParameters: TrainConnectionIdCarsGetRequest): Promise<Array<TrainCarDto>> {
        const response = await this.trainConnectionIdCarsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trainConnectionIdGetRaw(requestParameters: TrainConnectionIdGetRequest): Promise<runtime.ApiResponse<TrainConnectionDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trainConnectionIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trainConnection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainConnectionDtoFromJSON(jsonValue));
    }

    /**
     */
    async trainConnectionIdGet(requestParameters: TrainConnectionIdGetRequest): Promise<TrainConnectionDto> {
        const response = await this.trainConnectionIdGetRaw(requestParameters);
        return await response.value();
    }

}
